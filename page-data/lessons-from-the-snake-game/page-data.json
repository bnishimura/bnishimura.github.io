{"componentChunkName":"component---src-templates-blog-post-js","path":"/lessons-from-the-snake-game","result":{"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Lessons from the snake game\",\n  \"path\": \"/lessons-from-the-snake-game\",\n  \"date\": \"2022-05-12\",\n  \"tags\": [\"JavaScript\", \"React\"],\n  \"excerpt\": \"I've made one of those old snake games using React as a first step to learn the framework and ended up learning a lot about React and its particularities. Here I will try to condense this knowledge.\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"I\", \"'\", \"ve made onde of those old snake games as a first step to learn React:\"), mdx(\"div\", {\n    className: \"blog-post-content\",\n    style: {\n      display: \"flex\",\n      justifyContent: \"center\"\n    }\n  }, mdx(SnakeGame, {\n    mdxType: \"SnakeGame\"\n  })), mdx(\"p\", null, \"The code for the game can be found \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/bnishimura/NishiWare/blob/main/src/pages/lessons-from-the-snake-game/snake.js\"\n  }, \"here\"), \".\"), mdx(\"p\", null, \"It turns out React is not really a nice and clean way to make a game and the reason for this is mainly\\nbecause of React\", \"'\", \"s execution flow. Compared to simply updating a canvas with JavaScript, React seems like a\\nconvoluted solution that brings about a lot of complications. But none of this matters since the goal is to\\ngrok the framework. \"), mdx(\"p\", null, \"There is not really much to talk about in terms of game logic, after all this part of the code is actually\\nsimple JS. The problem lies in the integration between React and the game logic and that\", \"'\", \"s what I will explore\\nin this article.\"), mdx(\"h1\", null, \"The main hurdle: constant frame rate\"), mdx(\"hr\", null), mdx(\"p\", null, \"This might seem simple to solve at first: we can use the timer methods (like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setInterval()\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setTimeout()\"), \")\\nfrom the web APIs to call a game loop that handles the game state at each frame. But then, when you try to play\\nthe game, the canvas does not change even though your timer is getting called at the specified interval.\"), mdx(\"p\", null, \"The issue in this case is that React seems to, for each render, create a new object that represents the component,\\nwith each object carrying the state of the render as a static value. In other words, calling\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setInterval(gameLoop, 1000/FRAME_RATE)\"), \" will call the gameLoop of the first render FRAME_RATE times per second.\\nSince each render is a different object and each object has its own scope, carrying a React state that is not\\nmutable from within the object, gameLoop does not change. Thats the gist of it, now I shall elaborate each point\\nand outline a solution for it.\"), mdx(\"h2\", null, \"React states\"), mdx(\"p\", null, \"Consider the hook:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"const [count, setCount] = useState(0);\\n\")), mdx(\"p\", null, \"Every time the setter setCount is called, React calls the component. This component call is, at least in effect,\\nthe creation of a new component, but this time with a new, hard coded value you fed to the setter. This means\\nReact states inside each generated component are not supposed to be mutated \", \"\\u2013\", \" in fact, it is impossible\\nto do so (count in the example is constant, you cannot assign to it directly). Therefore, each render is\\nrepresented by a different instance of the component.\"), mdx(\"p\", null, \"So what causes the setInterval issue? Because each render is related to an instance of the game\", \"'\", \"s\\nreact component, and a different gameLoop belongs to each instance, there will always be a static React\\nstate inside any given gameLoop\", \"'\", \"s scope. Therefore setInterval is using a gameLoop that can only\\nsee the same \", \"\\u2013\", \" immutable \", \"\\u2013\", \" values (in other words, gameLoop\", \"'\", \"s scope does not change).\"), mdx(\"h2\", null, \"Solution\"), mdx(\"p\", null, \"The solution is to use a reference:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"const callback = useRef();\\nconst timer = useRef();\\nuseEffect(() => {\\n    callback.current = gameLoop;\\n    function tick() {\\n        callback.current();\\n    }\\n    timer.current = setInterval(tick, 1000/FRAME_RATE);\\n});\\n\")), mdx(\"p\", null, \"With the extra layer of indirection provided by the ref, we can pass the gameLoop of the current instance of the\\ncomponent. But doing something like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setInterval(callback.current, 1000/FRAME_RATE)\"), \" gives us the same problem,\\nmost likely because refs behave similarly to states (meaning they probably are instance-wise static).\\nSo we create a tick function to execute the gameLoop inside the ref. This way, setInterval does not get stuck\\nwith a statically\", \"\\u2013\", \"scoped gameLoop!\"), mdx(\"p\", null, \"The real best solution, though, is to not use any React related functionalities. We can just tie the game state\\nto the component\", \"'\", \"s scope and let setInterval call gameLoop that will be responsible to read the game state and\\nupdate the canvas. Admittedly when I started this little project, I couldn\", \"'\", \"t see this possibility, but at\\nleast I exercised all of the React muscles there are. Pretty cool if you ask me.\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"date":"May 12, 2022","path":"/lessons-from-the-snake-game","title":"Lessons from the snake game"}}},"pageContext":{}},"staticQueryHashes":["3649515864"]}